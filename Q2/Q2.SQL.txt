-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

create table movies(
    id integer,
    name text,
    score integer
);

create table movie_cast(
    movie_id integer,
    cast_id integer,
    cast_name text
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import ./movie-name-score.txt movies
.import ./movie-cast.txt movie_cast
-- sqlite commands no semicolons

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

create index scores_index on movies (score);
create index cast_index on movie_cast (cast_id);
create index movie_index on movies (id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

select (count(*) * 100 /(select count(*) from movies)) as prop from movies where score > 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

select * from movies
order by score desc
limit 7;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, (select count(*) from movie_cast m0 where m.cast_id = m0.cast_id) as movie_count
from movie_cast m
group by cast_id
order by movie_count desc, cast_name asc
limit 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, avg(score) as average_score from (
    -- subquery of (cast_id, cast_name, movie_id, score) of movies for each cast_id
    select movie_cast.cast_id, movie_cast.cast_name, movie_cast.movie_id, movies.score
        from movie_cast
        inner join movies on movie_cast.movie_id = movies.id
        )
    group by cast_id
    having count(cast_id) > 2 and avg(score) >= 50
    order by avg(score) desc
    limit 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

create view good_collaboration as
    select cast_member_id1, cast_member_id2, count(cast_member_id2) as movie_count, avg(score) as average_movie_score from (
        -- subquery of (cast_member_id1, cast_member_id2, movie_id, score) of movies/scores that the casts share
        select
            mc1.cast_id as cast_member_id1,
            mc2.cast_id as cast_member_id2,
            m.id as movie_id,
            m.score as score
        from movie_cast mc1
            inner join movie_cast mc2 on mc1.movie_id = mc2.movie_id and mc1.cast_id != mc2.cast_id
            inner join movies m on m.id = mc1.movie_id and m.id = mc2.movie_id
        )
    group by cast_member_id1
    having movie_count >= 3 and average_movie_score >= 40
    ;

-- select * from good_collaboration;

-- TODO: movie_count
-- TODO: on copy, keep lower id1 pair
-- TODO: uncomment SELECT AVG(average_movie_score) FROM good_collaboration;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --